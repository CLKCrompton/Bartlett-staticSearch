<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="makeRelease" default="all"
  xmlns:if="ant:if"
  xmlns:unless="ant:unless">
  
  <!-- 
        **********************************************************
        *       Ant file for building a release package.         *
        * This creates a folder called dist and puts in it all   *
        * files required for a working system, omitting some     *
        * irrelevant and unwanted bits and pieces.               *
        * When this is run, it will build the edition identifier *
        * for the release, and add it in a VERSION.txt file in   *
        * the distribution it creates.                           *
        **********************************************************
    -->
  
  <description>
    *************************************************************
    
    How to Make a Release:
    
    1. Make sure you're in the dev branch.
    
    2. Make sure all tests are passing and everything is working
       in the dev branch.
       
    3. Make sure all development branches are merged into dev.
    
    4. Edit the EDITION file to set the correct version number 
       for the release. Commit and push the change.
       
    5. git checkout main, then git merge dev with an appropriate
       message. Then git push.
       
    6. Run ant -f makeRelease.xml to build the release package.
       You'll need the zip file it creates.
       
    7. DON'T commit anything.
    
    8. Go to GitHub and draft a new release in the interface. 
       Get the release notes from the What's New page in the 
       documentation. Upload the built zip file as an asset
       for the release, then publish it.
       
    9. git checkout dev, then increment the version number in
       EDITION (adding "alpha") and commit/push.
       
    *************************************************************
  </description>
  
  <!--  We need ant contrib. -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  
  <!-- Files we need to include from the docs folder. -->
  <fileset id="docs" dir="${basedir}">
    <include name="docs/documentation.css"/>
    <include name="docs/staticSearch.html"/>
  </fileset>
  
  <!-- Files we need to include from the js folder. -->
  <fileset id="js" dir="${basedir}">
    <include name="js/ssSearch.js"/>
    <include name="js/ssHighlight.js"/>
  </fileset>
  
  <!-- Files we need to include from the stemmers folder. -->
  <fileset id="stemmers" dir="${basedir}">
    <include name="stemmers/**/ssStemmer.js"/>
    <include name="stemmers/**/ssStemmer.xsl"/>
  </fileset>
  
  <!-- Files we need to include from the lib folder. -->
  <fileset id="lib" dir="${basedir}">
    <include name="lib/*notices/**.*"/>
    <include name="lib/*.jar"/>
  </fileset>
  
  <!-- Files we need to include from the schema folder. -->
  <fileset id="schema" dir="${basedir}">
    <include name="schema/**.*"/>
  </fileset>
  
  <!-- Files we need to include from the test folder. -->
  <fileset id="test" dir="${basedir}">
    <include name="test/**/*.*"/>
  </fileset>
  
  <!-- Files we need to include from the base folder. -->
  <fileset id="base" dir="${basedir}">
    <include name="build.xml"/>
    <include name="license*.*"/>
    <include name="configTest.xml"/>
    <include name="README.md"/>
  </fileset>
  
  <!-- Files we need to include from the xsl folder. -->
  <fileset id="xsl" dir="${basedir}">
    <include name="xsl/create_config_xsl.xsl"/>
    <include name="xsl/create_reports.xsl"/>
    <include name="xsl/create_ssStems.xsl"/>
    <include name="xsl/english_stopwords.txt"/>
    <include name="xsl/english_words.txt"/>
    <include name="xsl/json.xsl"/>
    <include name="xsl/makeSearchPage.xsl"/>
    <include name="xsl/functions.xsl"/>
    <include name="xsl/tokenize.xsl"/>
  </fileset>
  
  <target name="clean">
    <description>
      TARGET clean
      Removes and re-creates the dist folder, and
      cleans up the results of previous test builds.
    </description>
    <delete dir="${basedir}/dist"/>
    <mkdir dir="${basedir}/dist"/>
    <delete dir="${basedir}/test/staticSearch"/>
  </target>
  
  <target name="getVersion">
    <description>
      TARGET getVersion
      Reads the EDITION file to get the version number 
      for the release. Saves the result to a VERSION.txt 
      in the dist folder, adding the date and repo hash 
      to the file to create a full descriptor for the 
      release.
    </description>
    <tstamp>
      <format property="date" pattern="yyyy-MM-dd" locale="en,CA"/>
    </tstamp>
    <delete file="${basedir}/dist/VERSION.txt"/>
    
    <!-- OLD approach was to ask. -->
    <!--<input message="What is the version number for this release?"
      addproperty="releaseVersion"
      defaultValue="0.7"/>-->
    <!-- Now we read it from disk. -->
    <loadfile srcfile="${basedir}/EDITION" property="releaseEditionRaw"/>
    <propertyregex
      property="releaseEdition"
      input="${releaseEditionRaw}"
      regexp="\s+"
      replace=""
      override="true"
    />
    <exec executable="git" outputproperty="gitHash">
      <arg value="rev-parse"/>
      <arg value="--short"/>
      <arg value="HEAD"/>
    </exec>
    
    <property name="fullReleaseEdition" value="${releaseEdition}+${date}.${gitHash}"/>
    <echo file="${basedir}/dist/VERSION.txt">${fullReleaseEdition}</echo>
  </target>
  
  <target name="buildDocs">
    <description>
      TARGET buildDocs
      This builds the latest version of the documentation and runs the
      search configuration on it.
    </description>
    <ant antfile="${basedir}/buildSchema.xml"/>
  </target>
  
  <target name="copyFiles">
    <description>
      TARGET copyFiles
      Copies all required files to the dist folder.
    </description>
    <copy todir="${basedir}/dist">
      <fileset refid="docs"/>
      <fileset refid="js"/>
      <fileset refid="lib"/>
      <fileset refid="stemmers"/>
      <fileset refid="schema"/>
      <fileset refid="test"/>
      <fileset refid="xsl"/>
      <fileset refid="base"/>
    </copy>
  </target>
  
  <target name="zip">
    <description>
      TARGET zip
      Zips up all the files in the dist folder into a release package.
    </description>
    <zip destfile="${basedir}/staticSearch-${fullReleaseEdition}.zip" basedir="${basedir}/dist"/>
  </target>
  
  <target name="all" depends="clean, getVersion, buildDocs, copyFiles, zip"/>
  
</project>