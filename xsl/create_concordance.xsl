<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:hcmc="http://hcmc.uvic.ca/ns/staticSearch"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
    xmlns:j="http://www.w3.org/2005/xpath-functions"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    xmlns:array="http://www.w3.org/2005/xpath-functions/array"
    exclude-result-prefixes="#all"
    xpath-default-namespace="http://www.w3.org/1999/xhtml"
    version="3.0">
    <xd:doc scope="stylesheet">
        <xd:desc>
            <xd:p><xd:b>Created on:</xd:b> July 4, 2019</xd:p>
            <xd:p><xd:b>Authors:</xd:b> Joey Takeda and Martin Holmes</xd:p>            
            <xd:p>This transformation, which is a utility transformation, creates various reports
                  from the search creation.</xd:p>
        </xd:desc>
        <xd:param name="hasFilters">Parameter, passed from the ant build, that specifies
        whether filters have been created for the staticSearch.</xd:param>
    </xd:doc>
    
    <!--**************************************************************
       *                                                            *
       *                         Includes                           *
       *                                                            *
       **************************************************************-->  
    <xd:doc>
        <xd:desc>Include the generated config file.</xd:desc>
    </xd:doc>
    <xsl:include href="config.xsl"/>
 
    <xd:doc>
        <xd:desc>Include the functions</xd:desc>
    </xd:doc>
    <xsl:include href="functions.xsl"/>
   

    <!--**************************************************************
       *                                                            *
       *                         Variables                          *
       *                                                            *
       **************************************************************-->  
    
    <xd:doc>
        <xd:desc><xd:ref name="spans" type="variable">$stemsDir</xd:ref> is the directory
        that contains all of the stems generated by json.xsl.</xd:desc>
    </xd:doc>
    <xsl:variable name="stemsDir" select="$outDir || '/stems'" as="xs:string"/>
    
    <xsl:variable name="stemURIs" 
        select="uri-collection($stemsDir || '?select=*.json;recurse=no')"
        as="xs:anyURI+"/>
    
    <xsl:variable name="concordanceJSON" as="map(*)">
        <xsl:map>
            <xsl:for-each select="$stemURIs">
                <xsl:variable name="thisJson" select="parse-json(unparsed-text(.))" as="map(*)"/>
                <xsl:variable name="allInstances" select="array:flatten($thisJson?instances)" as="map(*)*"/>
                <xsl:variable name="allContexts" select="$allInstances ! array:flatten(.?contexts)" as="map(*)*"/>
                <xsl:variable name="variantsMap" as="map(*)">
                    <xsl:map>
                        <xsl:for-each-group select="$allInstances" group-by="array:flatten(.?contexts) ! .?form">
                            <xsl:map-entry key="current-grouping-key()" select="count(current-group())"/>
                        </xsl:for-each-group>
                    </xsl:map>
                    
                </xsl:variable>
                <xsl:map-entry key="$thisJson?stem">
                    <xsl:map>
                        <xsl:map-entry key="'instances'" select="count($allContexts)"/>
                        <xsl:map-entry key="'variants'" select="$variantsMap"/>
                        <xsl:map-entry key="'documents'" select="count($allInstances)"/>
                    </xsl:map>
                </xsl:map-entry>
            </xsl:for-each>
        </xsl:map>
    </xsl:variable>
    
    
    <xsl:template name="makeConcordance">
        <xsl:message>Found <xsl:value-of select="count($stemURIs)"/> stems...</xsl:message>
        <xsl:call-template name="makeConcordanceJSON"/>
        <xsl:call-template name="makeConcordanceHTML"/>
    </xsl:template>
    
    <xsl:template name="makeConcordanceJSON">
        <xsl:result-document href="{$outDir}/concordance.json" method="json">
            <xsl:sequence select="$concordanceJSON"/>
        </xsl:result-document>
    </xsl:template>
    
    <xsl:template name="makeConcordanceHTML">
        <xsl:result-document href="{$outDir}/concordance.html" method="xhtml" encoding="UTF-8" normalization-form="NFC"
            exclude-result-prefixes="#all" omit-xml-declaration="yes" html-version="5.0">
            <html>
                <head><title>Concordance</title></head>
                <body>
                    <div>
                        <xsl:call-template name="makeConcordanceHTMLTable"/>
                    </div>
                </body>
            </html>
        </xsl:result-document>       
    </xsl:template>
    
    <xsl:template name="makeConcordanceHTMLTable">
        <table>
            <thead>
                <tr>
                    <th>Stem</th>
                    <th>Total Instances</th>
                    <th>Total Variants</th>
                    <th>Variant List</th>
                    <th>Number of Documents</th>
                </tr>
            </thead>
            <tbody>
                <xsl:for-each select="map:keys($concordanceJSON)">
                    <xsl:sort select="map:get($concordanceJSON, .)?instances" order="descending"/>
                    <xsl:variable name="currMap" select="map:get($concordanceJSON, .)" as="map(*)"/>
                    <xsl:variable name="variantsMap" select="$currMap?variants" as="map(*)"/>
                    <tr>
                        <td><xsl:value-of select="."/></td>
                        <td><xsl:value-of select="$currMap?instances"/></td>
                        <td><xsl:value-of select="map:size($variantsMap)"/></td>
                        <td>
                            <ul>
                                <xsl:for-each select="map:keys($variantsMap)">
                                    <xsl:sort select="map:get($variantsMap,.)" order="descending"/>
                                    <li><xsl:value-of select="."/></li>
                                </xsl:for-each>
                            </ul>
                        </td>
                        <td>
                            <xsl:value-of select="$currMap?documents"/>
                        </td>
                        
                    </tr>
                    
                </xsl:for-each>
                <!--Now iterate through all of the concordance, but sort by instances-->
            </tbody>
        </table>
    </xsl:template>
    
    
    
    
</xsl:stylesheet>