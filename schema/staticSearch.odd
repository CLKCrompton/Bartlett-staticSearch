<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Project Endings Static Search Generator</title>
        <author><name>Martin Holmes</name></author>
        <author><name>Joey Takeda</name></author>
      </titleStmt>
      <publicationStmt>
        <publisher>University of Victoria Humanities Computing and Media Centre</publisher>
        <availability><licence>Free to anyone for any purpose</licence></availability>
      </publicationStmt>
      <sourceDesc>
        <p>Born-digital document</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      <titlePage>
        <docTitle>
          <titlePart type="main">Project Endings Static Search Generator</titlePart>
          <titlePart type="sub">Schema and guidelines for creating a static search engine for your HTML5 site</titlePart>
        </docTitle>
        <docAuthor>Martin Holmes</docAuthor>
        <docAuthor>Joey Takeda</docAuthor>
        <docDate>2019</docDate>
      </titlePage>
      <divGen type="toc"/>
    </front>
    <body>
        <head>Project Endings Static Search Generator</head>
        <p>This documentation provides instructions on how to use the Project Endings
        Static Search Generator to provide a fully-functional search <soCalled>engine</soCalled>
        to your website without any dependency on server-side code such as a database.</p>
        <div>
          <head>How does it work?</head>
          <p>The generator tool processes your site to create an index of all the words appearing
          in the site, stemmed using a Porter2 stemmer, and stores the index in the form of a
          large number of small JSON files. It also creates a search page for your site, which 
          processes user search terms and retrieves the required JSON files to provide search results.</p>
        </div>
        <div>
          <head>Search features</head>
          <p>The Generator supports the following features:</p>
          <list>
            <item>Porter 2 stemming of terms (so searching for <q>wait</q> will also
            retrieve <q>waiting</q>, <q>waits</q>, <q>waited</q> etc.). Our stemmer
            is for English, but if you have documents in another language, you can create
            and plug in your own stemmer.</item>
            <item>Boolean search operators. Adding <code>+</code> (plus) before a word means that
            search results <emph>must contain</emph> that word, and adding a <code>-</code> (minus) means
            that results <emph>must not contain</emph> that word. Words without plus or minus are treated
            as <emph>may contain</emph>, contributing to the score of any retrieved document.</item>
            <item>Phrasal searches. Any quoted phrase will be searched as-is, and when quoted phrases 
            are included in a search, any hit document must contain at least one of them. Note that phrasal
            search support requires a specific setting in your configuration file, because it increases the
            size of the index.</item>
            <item>Keyword-in-context search results. This is also configurable, since including contexts
            increases the size of the index.</item>
            <item>Search filtering using any metadata you like, allowing users to limit their search to specific
            document types.</item>
          </list>
        </div>
        <div>
          <head>How do I use it?</head>
          
          <p>First, you will have to make sure your site pages are correctly configured so that the Generator can
          parse them. Then, you will have to create a configuration file specifying what options you want to use. 
          Then you run the generator, and the search functionality should be added to your site.</p>
          
          <div>
            <head>Configuring your site</head>
            <p>The generator is expecting to parse <emph>well-formed XHTML5 web pages</emph>. That means
            web pages which are well-formed XML, using the XHTML namespace. If your site is just raggedy tag-soup,
            then you can't use this tool.</p>
            <p>Next, you will need to decide whether you want search filters or not. If you want to allow
            your users to search (for example) only in poems, or only in articles, or only in blog posts, or 
            any combination of these document types, you will need to add <gi>meta</gi> tags to the heads of
            your documents to specify what these filters are. Here is a simple example:
            
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
              <meta name="Document type" class="staticSearch.filter" content="Poems" />
            </egXML>
              
              This specifies that there is to be a search filter called <q>Document type</q>, and one of the
              types is <q>Poems</q>; the document containing this <gi>meta</gi> tag is one of the Poems. Another
              type might be:
              
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <meta name="Document type" class="staticSearch.filter" content="Short stories" />
              </egXML>
              
              If the Generator finds such meta tags when it is indexing, it will create a set of filter controls
              on the search page, enabling the user to constrain the search to a specific set of filter settings.
            </p>
            
            <p>Another slightly different kind of search control is a document date. If your collection of 
            documents has items from different dates, you can add a <gi>meta</gi> tag like this:
            
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <meta name="Date of publication" class="staticSearch.date" content="1895-01-05" />
              </egXML>
              
              The date may take any of the following forms:
              
              <list>
                <item>1895 (year only)</item>
                <item>1895-01 (year and month)</item>
                <item>1895-01-05 (year, month and day)</item>
              </list>
              
              For some documents, it may not be possible to specify a single date in this form,
              so you can specify a range instead, using a slash to separate the start and end
              dates of the range (following ISO 8601):
              
              <list>
                <item>1895/1897</item>
               <item>1903-01-02/1905-05-31</item>
              </list>
            </p>
          </div>
          
          <div>
            <head>Creating a configuration file</head>
            
            <p>The configuration file is an XML document which tells the Generator where to find your site,
            and what search features you would like to include. The configuration file conforms to a schema which is
            documented here.</p>
            <p>There are three main sections of the configuration file:
              <list>
                <item><gi>params</gi></item>
                <item><gi>rules</gi></item>
                <item><gi>contexts</gi></item>
              </list>
              Only the <gi>params</gi> element is necessary, but, as we discuss shortly, we highly suggest taking advantage of the <gi>rules</gi>
              and <gi>contexts</gi> for the best results.
            </p>
            <div>
              <head>Specifying Parameters (Required)</head>
              <p>The <gi>params</gi> element has two required elements for determining the resource collection that you wish to index:
              <list>
                <item><gi>searchFile</gi></item>
                <item><gi>recurse</gi></item>
              </list>
              </p>
              <p>The <gi>searchFile</gi> element is a relative URI (resolved, like all URIs specified in the config file, against the configuration file location) that points
              directly to the search page that will be the primary access point for the search. Since the search file must be at the root of the directory that you wish to index
              (i.e. the directory that contains all of the XHTML you want the search to index), the searchFile parameter provides the necessary information for knowing what documents
              to index and where to put the output JSON.</p>
              <p>Note that all output files will be in a directory that is a sibling to the search page. For instance, in a document collection that looks something like:
              <list style="font-family: monospace">
                <item>myProject
                <list>
                  <item>novel.html</item>
                  <item>poem.html</item>
                  <item>shortstory.html</item>
                  <item>search.html</item>
                </list>
                </item>
              </list>
              The collection of Javascript and JSON files will be in a directory like so:
                <list style="font-family: monospace">
                  <item>myProject
                    <list>
                      <item>novel.html</item>
                      <item>poem.html</item>
                      <item>shortstory.html</item>
                      <item>search.html</item>
                      <item><emph>staticSearch</emph></item>
                    </list>
                  </item>
                </list>
              </p>
              <p>We also require the <gi>recurse</gi> element in the case where the document collection may be nested (as is common with static sites generated from Jekyll or Wordpress). The <gi>recurse</gi> element is a boolean (true or false) that determines whether or not to recurse into the subdirectories of the collection and index those files.</p>
            </div>
          <div>
            <head>Specifying Rules (Optional)</head>
            <p>The <gi>rules</gi> elements specifies a list of conditions (using the <gi>rule</gi> element) that tell the parser, using XPath statements in the <att>xpath</att> attribute, specific weights to assign to particular parts of each document. For instance, if you wanted all heading elements (<gi>h1</gi>, <gi>h2</gi>, etc) in documents to be given a greater weight and thus receive a higher score in the results, you can do so using a rule like so:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <rules>
                  <rule weight="2" xpath="h1 | h2 | h3 | h4 | h5 | h6"/>
                </rules>
              </egXML>
              
              Since we're using XPath 3.0 and XSLT 3.0, this can also be simplified to:
              
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <rules>
                  <rule weight="2" xpath="*[matches(local-name(),'^h\d+$')]"/>
                </rules>
              </egXML>
              (It is worth noting, however, the above example is unnecessary: all heading elements are given a weight of 2 by default, which is the only preconfigured weight in static search.)
            </p>
            <p>The value of the <att>xpath</att> attribute is transformed in a XSLT template match attribute, and thus must follow the same rules (i.e. no complex rules like <code>p/ancestor::div</code>). See the <ref target="https://www.w3.org/TR/xslt-30/#dt-pattern">W3C XSLT Specification</ref> for further details on allowable pattern rules.</p>
            <p>Often, there will be elements that you want the tokenizer to ignore completely; for instance, if you have the same header in every document, then there's no reason to index its contents on every page. These elements can be ignored simply by using a <gi>rule</gi> and setting its weight to 0. For instance, if you want to remove the header and the footer from the search indexing process, you could write something like:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <rule weight="0" xpath="footer | header"/>
              </egXML>
              Or if you want to remove XHTML anchor tags (<gi>a</gi>) whose text is identical to the URL specified in its <att>href</att>, you could do something like:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <rule weight="0" xpath="a[@href=./text()]"/>
              </egXML>
            </p>
            <p>Note that the indexer does not tokenize any content in the <gi>head</gi> of the document (but as noted above, metadata can be configured into filters) and that all elements in the <gi>body</gi> of a document are considered tokenizable. However, common elements that you might want to exclude include:
              <list>
                <item><gi>script</gi></item>
                <item><gi>style</gi></item>
                <item><gi>code</gi></item>
              </list>
            </p>
          </div>
          <div>
            <head>Specifying Contexts (Optional)</head>
            <p>When the static search creates the keywords-in-contexts (the "kwic" or "snippets") for each token, it does so by looking for the nearest block-level element that it can use as its context. Take, for instance, this unordered list:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <ul>
                  <li>Keyword-in-context search results. This is also configurable, since including contexts
                    increases the size of the index.</li>
                  <li>Search filtering using any metadata you like, allowing users to limit their search to specific
                    document types.</li>
                </ul>
              </egXML>
              Each <gi>li</gi> elements is, by default, a <term>context</term> element, meaning that the snippet generated for each token will not extend beyond the <gi>li</gi> element boundaries; in this case, if the <gi>li</gi> was not a context attribute, the term <q>search</q> would produce a context that looks something like:
              
              <eg>"...the size of the index.<hi style="font-weight:bold;">Search</hi> filtering using any metadata you like,..."</eg>
            </p>
            <p>Using the <gi>contexts</gi> element, you can control what elements operate as contexts. For instance, say a page contained a marginal note, encoded as a <gi>span</gi> in your document beside its point of attachment:<note place="foot">This example taken from Thomas S. Kuhn, <title level="m">The Structure of Scientific Revolutions</title> (50th anniversary edition), University of Chicago Press, 2012: p. 191.</note>
              
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <p>About that program I shall have nothing to say here,<span class="sidenote">Some information on this subject can be found in "Second Thoughts"</span> [...]
                </p>
              </egXML>
              Using CSS, the footnote might be alongside the text of the document in margin, or made into a clickable object using Javascript. However, since the tokenizer is unaware of any server-side processing, it understands the <gi>span</gi> as an inline element and assumes the <gi>p</gi> constitutes the context of the element. A search for <q>information</q> might then return:
              
              <eg>"...nothing to say here,Some <hi style="font-weight:bold;">information</hi> on this subject can be found...</eg>
              
              To tell the tokenizer that the <gi>span</gi> constitutes the context block for any of its token, use the <gi>context</gi> element with an <att>xpath</att> pattern:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <contexts>
                  <context xpath="span[contains-token(@class,'sidenote')]"/>
                </contexts>
              </egXML>
            </p>
            <p>You can also configure it the other way: if a <gi>div</gi>, which is by default a context block, should not be understood as a context block, then you can tell the parser to not consider it as such using <att>context</att> set to false:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"> 
                <contexts>
                  <context xpath="div" context="false"/>
                </contexts>
              </egXML>
            </p>
            <p>The default contexts elements are:
              <list>
                <item><gi>body</gi></item>
                <item><gi>div</gi></item>
                <item><gi>blockquote</gi></item>
                <item><gi>p</gi></item>
                <item><gi>li</gi></item>
                <item><gi>section</gi></item>
                <item><gi>article</gi></item>
                <item><gi>nav</gi></item>
                <item><gi>h1</gi></item>
                <item><gi>h2</gi></item>
                <item><gi>h3</gi></item>
                <item><gi>h4</gi></item>
                <item><gi>h5</gi></item>
                <item><gi>h6</gi></item>
                <item><gi>td</gi></item>
              </list>
            </p>
          </div>
          </div>
        </div>
      
    </body>
    <back>
      <div>
        <schemaSpec ident="staticSearch" start="config" ns="http://hcmc.uvic.ca/ns/staticSearch"
          defaultExceptions="http://hcmc.uvic.ca/ns/staticSearch">

          <moduleSpec ident="ss">
            <desc>Module for all of the static search elements.</desc>
          </moduleSpec>

          <elementSpec ident="config" ns="http://hcmc.uvic.ca/ns/staticSearch" module="ss">
            <gloss>The root element for the Search Generator configuration file.</gloss>
            <content>
              <elementRef key="params"/>
              <elementRef key="rules" minOccurs="0"/>
              <elementRef key="contexts" minOccurs="0"/>
            </content>
          </elementSpec>

          <elementSpec ident="params" ns="http://hcmc.uvic.ca/ns/staticSearch" module="ss">
            <gloss>Element containing most of the settings which enable the Generator to
            find the target website content and process it appropriately.</gloss>
            <content>
              <sequence preserveOrder="false">
                <elementRef key="searchFile"/>
                <elementRef key="recurse"/>
                <elementRef key="phrasalSearch" minOccurs="0"/>
                <elementRef key="createContexts" minOccurs="0"/>
                <elementRef key="maxContexts" minOccurs="0"/>
                <elementRef key="totalKwicLength" minOccurs="0"/>
                <elementRef key="kwicTruncateString" minOccurs="0"/>
                <elementRef key="verbose" minOccurs="0"/>
                <elementRef key="stopwordsFile" minOccurs="0"/>
                <elementRef key="dictionaryFile" minOccurs="0"/>
                <elementRef key="replacementsFile" minOccurs="0"/>
                <elementRef key="searchPage" minOccurs="0"/>
                <elementRef key="searchInputId" minOccurs="0"/>
                <elementRef key="indentJSON" minOccurs="0"/>
              </sequence>
            </content>
          </elementSpec>

          <elementSpec ident="rules" ns="http://hcmc.uvic.ca/ns/staticSearch" module="ss">
            <gloss>The set of rules, expressed as XPath, that control weighting of search terms
              found in specific contexts.</gloss>
            <content>
              <elementRef key="rule" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>

          <elementSpec ident="contexts" ns="http://hcmc.uvic.ca/ns/staticSearch" module="ss">
            <content>
              <elementRef key="rule" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>

          <elementSpec ident="rule" ns="http://hcmc.uvic.ca/ns/staticSearch" module="ss">
            <gloss>A rule that specifies a document path in XPath, and provides weighting for search
              terms found in that context.</gloss>
            <classes>
              <memberOf key="att.xpathRule"/>
            </classes>
            <content>
              <empty/>
            </content>
          </elementSpec>

          <classSpec ident="att.xpathRule" module="ss" type="atts">
            <gloss>A class providing attributes that enable specification of document locations and
              weighting.</gloss>
            <constraintSpec ident="rules.ruleMustHaveWeight" scheme="schematron">
              <constraint>
                <sch:rule context="*:rules/*:rule">
                  <sch:assert test="@weight">ERROR: All weighting rules must have a weight.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <attList>
              <attDef ident="xpath">
                <gloss>An XPath equivalent to the @match attribute of an xsl:template, which
                  specifies a context in a document.</gloss>
                <datatype>
                  <dataRef name="string"/>
                </datatype>
              </attDef>
              <attDef ident="weight" usage="opt">
                <gloss>The weighting to give to a search token found in the context specified by the
                    <att>xpath</att> attribute. Set to 0 to completely suppress indexing for a
                  specific context, or greater than 1 to give stronger weighting.</gloss>
                <datatype>
                  <dataRef name="nonNegativeInteger"/>
                </datatype>
              </attDef>
              <attDef ident="context" usage="opt">
                <datatype>
                  <dataRef name="boolean"/>
                </datatype>
              </attDef>
            </attList>
           
          </classSpec>

          <elementSpec ident="searchFile" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>The search file (aka page) that will be the primary access point for the static search. Note
            that this page <emph>must</emph> be at the root of the collection directory.</gloss>
            <content>
              <dataRef name="anyURI"/>
            </content>
          </elementSpec>
          
          <elementSpec ident="recurse" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>Whether to recurse into subdirectories of the collection directory or
              not.</gloss>
            <content>
              <dataRef name="boolean"/>
            </content>
          </elementSpec>
      
          <elementSpec ident="createContexts" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>Whether to include keyword-in-context extracts in the index. This increases the
              size of the index considerably, but it allows for more user-friendly search results,
              as well as phrasal searches.</gloss>
            <content>
              <dataRef name="boolean"/>
            </content>
          </elementSpec>
          <elementSpec ident="totalKwicLength" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>If <gi>createContexts</gi> is set to true, then this parameter controls how long
              the contexts will be.</gloss>
            <content>
              <dataRef name="nonNegativeInteger"/>
            </content>

          </elementSpec>
          <elementSpec ident="maxContexts" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>This controls the maximum number of keyword-in-context extracts that will be
              stored for each term. If <gi>phrasalSearch</gi> is set to true, this parameter is
              ignored, because phrasal searches will only work properly if all contexts are
              stored.</gloss>
            <content>
              <dataRef name="nonNegativeInteger"/>
            </content>
          </elementSpec>

          <elementSpec ident="kwicTruncateString" module="ss"
            ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>The string that will be used to signal ellipsis at the beginning and end of a
              keyword-in-context extract. Conventionally three periods, or an ellipsis
              character.</gloss>
            <content>
              <textNode/>
            </content>
          </elementSpec>

          <elementSpec ident="indentJSON" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>Whether or not to indent code in the JSON index files. Indenting increases the
              file size, but it can be useful if you need to read the files for debugging
              purposes.</gloss>
            <content>
              <dataRef name="boolean"/>
            </content>
          </elementSpec>
          <elementSpec ident="phrasalSearch" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>Whether or not to support phrasal searches. If this is true, then the <gi>maxContexts</gi>
            setting will be ignored, because all contexts are required to properly support phrasal search.</gloss>
            <content>
              <dataRef name="boolean"/>
            </content>

          </elementSpec>
          <elementSpec ident="verbose" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>Turns on more detailed reporting during the indexing process.</gloss>
            <content>
              <dataRef name="boolean"/>
            </content>
          </elementSpec>
          <elementSpec ident="stopwordsFile" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>The location of a text file containing a list of stopwords (words to be ignored
            when indexing). These are typically words too common to be worth searching for, but 
            every site will also have some specific terms which are used so widely across the site
            that they should be suppressed to control the index size. The list should be in plain text
            with one word per line.</gloss>
            <content>
              <dataRef name="anyURI"/>
            </content>
          </elementSpec>
          <elementSpec ident="dictionaryFile" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>The location of a dictionary file (one word per line) which will be used to check
            tokens when indexing.</gloss>
            <content>
              <dataRef name="anyURI"/>
            </content>
          </elementSpec>
          <elementSpec ident="searchPage" module="ss" ns="http://hcmc.uvic.ca/ns/staticSearch">
            <gloss>The location of a search page in the site to be indexed. This page must contain
            a div element with id="staticSearch". That div will be transformed to include the 
            search form and all other required components.</gloss>
            <content>
              <dataRef name="anyURI"/>
            </content>
          </elementSpec>



        </schemaSpec>
      </div>
    </back>
  </text>
</TEI>
