<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="BuildStaticSearch" default="all"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">
    
    <!-- 
        **********************************************************
        *  Ant file for building a static search engine for a    *
        *  specific site. When supplied with a config file path  *
        *  using the -DconfigFile=/home/user/proj/cfg.xml, it    *
        *  will build the index based on that configuration.     *
        *  If not supplied with a configuration file, it will    *
        *  build the test site by default.                       *
        **********************************************************
    -->
    
    <!--  We need ant contrib. -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    <property name="saxon" value="${basedir}/lib/saxon9he.jar"/>
    
    <property name="config" value="configTest.xml"/>
    
    <property name="configFile" value="${basedir}/${config}"/>
    
    <dirname property="configDir" file="${configFile}"/>
    
    <xmlproperty file="${configFile}" keeproot="true"/>
    
    <property name="verbose" value="true"/>
    
    <property name="searchFilePath" location="${configDir}/${config.params.searchFile}"/>
    
    <dirname property="collectionDirName" file="${searchFilePath}"/>
    
    <property name="outputFolder" if:set="config.params.outputFolder" value="${config.params.outputFolder}"/>
    <property name="outputFolder" unless:set="config.params.outputFolder" value="staticSearch"/>
    
    <property name="staticSearchDir" value="${collectionDirName}/${outputFolder}/"/>
    
    <property name="headless" value="false"/>
    
    <basename property="searchPageBasename" file="${searchFilePath}"/>
    
    <property name="tempSearchPageOutput" value="${collectionDirName}/ssTemp_${searchPageBasename}"/>
    
    
    <target name="init">
        <delete dir="temp"/>
        <delete file="${basedir}/xsl/config.xsl"/>
        <delete file="${tempSearchPageOutput}"/>
        <delete dir="${staticSearchDir}"/>
        <mkdir dir="${staticSearchDir}"/>
        <!-- If we're building the test data, we need to generate the VERSION file. -->
        <if>
            <equals arg1="${basedir}/configTest.xml" arg2="${configFile}"/>
            <then>
                <delete file="${basedir}/test/VERSION"/>
                <exec executable="git">
                    <arg value="rev-parse"/>
                    <arg value="--short"/>
                    <arg value="HEAD"/>
                    <redirector output="${basedir}/test/VERSION"/>
                </exec>
            </then>
        </if>
    </target>
    
    <target name="validate">
        <description>Task to validate that the source XHTML is well-formed XHTML. Note
            that this DOES NOT check whether or not it is valid XHTML: only that it is well-formed.
            This target also checks the config file and sees if it's invalid. We don't fail if it's invalid,
            though, since we must assume that some people just don't care: but raise the error anyway.
        </description>
        
        <echo message="Validating ${collectionDirName} for well-formedness"/>
        <!--@lenient='true' since we are only checking well-formedness-->
        <xmlvalidate lenient="true">
            <fileset dir="${collectionDirName}">
                <include name="**/**.*htm*"/>
            </fileset>
        </xmlvalidate>
        
        <echo message="Validating ${configFile} against the staticSearch schema..."/>
        <exec executable="java" failonerror="false">
            <arg line="-jar ${basedir}/lib/jing.jar"/>
            <arg value="${basedir}/schema/staticSearch.rng"/>
            <arg value="${configFile}"/>
        </exec>
    </target>
    
    
    <!--First thing, create the config file-->
    <target name="config">
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" >
            <arg value="-xsl:${basedir}/xsl/create_config_xsl.xsl"/>
            <arg value="-s:${basedir}/xsl/create_config_xsl.xsl"/>
            <arg value="configFile=${configFile}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    <!--Then tokenize-->
    <target name="tokenize">
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" >
            <arg value="-xsl:${basedir}/xsl/tokenize.xsl"/>
            <arg value="-s:${basedir}/xsl/tokenize.xsl"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
            <jvmarg value="-Xmx2048m"/>
        </java>
    </target>
    
    
    <!--Then create JSON-->
    
    <target name="json">
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" >
            <arg value="-xsl:${basedir}/xsl/json.xsl"/>
            <arg value="-s:${basedir}/xsl/json.xsl"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    <target name="jsonDocByDoc">
        
        <!--First, create all of the directories that will end up being necessary
            for the JSON combining later; all of the tokens will get slotted into one
            of these directories-->
        <foreach list="a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0" param="char"  inheritall="true" target="makedir"/>
        
        
        <!--And now process the JSONs doc by doc-->
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" fork="true">
            <arg value="-xsl:${basedir}/xsl/json_docbydoc.xsl"/>
            <arg value="-s:${basedir}/xsl/json_docbydoc.xsl"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
            <jvmarg value="-Xmx2048m"/>
        </java>
    </target>
    
    <target name="combineJsons">
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" fork="true">
            <arg value="-xsl:${basedir}/xsl/combine_jsons.xsl"/>
            <arg value="-s:${basedir}/xsl/combine_jsons.xsl"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
            <jvmarg value="-Xmx2048m"/>
        </java>
    </target>
    
    <target name="makedir">
        <mkdir dir="${staticSearchDir}/temp/new/lower/${char}"/>
        <mkdir dir="${staticSearchDir}/temp/new/upper/${char}"/>
    </target>
    
    
    
    <target name="makeSearchPage">
        <echo message="Creating search page..."/>
        <if taskname="copy">
            <not>
                <available file="${searchFilePath}"/>
            </not>
            <then>
                <echo>WARNING: Cannot find search file at ${searchFilePath}. Created a template file from xsl/sample_search.html.</echo>
                <copy file="xsl/sample_search.html" tofile="${searchFilePath}"/>
            </then>
        </if>
        
        <echo message="Creating temporary search page: ${tempSearchPageOutput}"/>
        <available type="dir" property="hasFilters" file="${staticSearchDir}/filters" value="true"/>
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" >
            <arg value="-xsl:${basedir}/xsl/makeSearchPage.xsl"/>
            <arg value="-s:${searchFilePath}"/>
            <arg value="-o:${tempSearchPageOutput}"/>
            <arg value="hasFilters=${hasFilters}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
            <jvmarg value="-Xmx2048m"/>
        </java>
        
        <echo message="Moving ${tempSearchPageOutput} to overwrite ${searchFilePath}"/>
        <move file="${tempSearchPageOutput}" tofile="${searchFilePath}"/>
        
    </target>
    
    <target name="report">
        <available type="dir" property="hasFilters" file="${staticSearchDir}/filters" value="true"/>
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" >
            <arg value="-xsl:${basedir}/xsl/create_reports.xsl"/>
            <arg value="-s:${basedir}/xsl/create_reports.xsl"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
            <arg value="hasFilters=${hasFilters}"/>
            <jvmarg value="-Xmx2048m"/>
        </java>
        <move file="${basedir}/staticSearch_report.html" tofile="${staticSearchDir}/staticSearch_report.html"/>

        <open unless:true="${headless}" file="${staticSearchDir}/staticSearch_report.html"/>
        
    </target>
    
    <target name="copyFiles">
        <copy todir="${staticSearchDir}/">
            <fileset dir="${basedir}/js">
                <include name="ss**.js"/>
            </fileset>
        </copy>
    </target>
    
    <target name="clean">
        <delete dir="${staticSearchDir}/temp"/>
    </target>
    
    <target name="getWea">
        <description>TARGET getWEA
            This target pulls the latest build of the Winnifred Eaton Archive site
            from the HCMC Jenkins build server, so that it can be uesd as a test for the static search.
            
        </description>
    </target>
    
    <!--Javascript OPEN task-->
    
    <!--  This is taken with thanks from:
      http://stackoverflow.com/questions/4696176/using-ant-how-do-i-open-a-file-in-a-browser -->
    <scriptdef name="open" language="javascript">
        <attribute name="file" />
        <![CDATA[
        var location = "file://"+attributes.get("file").toString().replaceAll("\\\\","/");
        location = location.toString().replaceAll(" ","%20");
        location = java.net.URLEncoder.encode(location, "UTF-8");
        location = location.toString().replaceAll("%3A",":");
        location = location.toString().replaceAll("%2F","/");
        location = location.toString().replaceAll("%25","%");
        var uriLocation = java.net.URI.create(location);
        var desktop = java.awt.Desktop.getDesktop();
        desktop.browse(uriLocation);
    ]]>
    </scriptdef>
    
    <target name="all" depends="init, validate, config, tokenize, json, copyFiles, makeSearchPage, report, clean"/>
    
    <!-- Don't clean up so we can see what's happening. -->
    <target name="test" depends="init, validate, config, tokenize, json, copyFiles, makeSearchPage, report"/>
    
    <target name="basic" depends="init, validate, config, tokenize, json, copyFiles, makeSearchPage, clean"/>
    
    <target name="new" depends="init, validate, config, tokenize, jsonDocByDoc, combineJsons, copyFiles, makeSearchPage, report"/>
    
    <target name="basicNew" depends="init, config, tokenize, jsonDocByDoc, combineJsons, copyFiles, makeSearchPage, report, clean"/>
</project>